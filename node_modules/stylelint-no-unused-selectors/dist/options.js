"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stylelint_1 = __importDefault(require("stylelint"));
const optionsSchema = {
    resolve: {
        documents: [(a) => typeof a === 'string'],
    },
    plugins: [
        (p) => typeof p === 'object' && p !== null && 'test' in p && 'plugin' in p,
    ],
};
const defaultOptions = {
    resolve: {
        documents: [
            '{cssDir}/{cssName}.tsx',
            '{cssDir}/{cssName}.jsx',
            '{cssDir}/{cssName}.html',
            '{cssDir}/{cssName}.htm',
            '{cssDir}/{cssDirName}.tsx',
            '{cssDir}/{cssDirName}.jsx',
            '{cssDir}/{cssDirName}.html',
            '{cssDir}/{cssDirName}.htm',
            '{cssDir}/index.tsx',
            '{cssDir}/index.jsx',
            '{cssDir}/index.html',
            '{cssDir}/index.htm',
        ],
    },
    plugins: [
        {
            test: '\\.html?$',
            plugin: 'stylelint-no-unused-selectors-plugin-html',
        },
        {
            test: '\\.jsx?$',
            plugin: 'stylelint-no-unused-selectors-plugin-jsx',
            options: {
                sourceType: 'module',
                plugins: ['jsx', 'flow'],
            },
        },
        {
            test: '\\.tsx$',
            plugin: 'stylelint-no-unused-selectors-plugin-tsx',
        },
    ],
};
function normaliseOptions(result, ruleName, options) {
    const areOptionsValid = stylelint_1.default.utils.validateOptions(result, ruleName, {
        actual: options,
        possible: optionsSchema,
        optional: true,
    });
    if (!areOptionsValid) {
        return;
    }
    const mergedOpts = Object.assign(defaultOptions, options);
    return mergedOpts;
}
exports.normaliseOptions = normaliseOptions;
