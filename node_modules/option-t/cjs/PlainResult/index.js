"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *  This module provies that the Result/Either type interface whose APIs are inspired
 *  by Rust's [`std::result::Result<T, E>`](https://doc.rust-lang.org/std/result/index.html).
 *
 *  We don't use a class to provides this module by these reason:
 *
 *  - Make treeshaking friendly.
 *      - Almost minifier cannot remove functions by default on `.prototype` even if they are unused.
 *  - Relax the incompatible problem by mixing multiple versions of this package
 *    in module dependency tree.
 *      - e.g. `instanceof` will be a problem. See ([#337](https://github.com/karen-irc/option-t/pull/337)).
 *
 *  And some operators might not return a new object and reuse the input
 *  to reduce an object allocation. Thus comparing _this `Option<T>`` is meaningless like a following code.
 *  This is by design because we think this pattern is meaningless.
 *
 *  ```typescript
 *      const a: Result<number, string> = createOk(1);
 *      const b: Result<number, string> = someOperator(a);
 *
 *      // Results of these comparison are undefined.
 *      a === b;
 *      Object.is(a, b);
 *  ```
 */
var Result_1 = require("./Result");
exports.createOk = Result_1.createOk;
exports.createErr = Result_1.createErr;
exports.isOk = Result_1.isOk;
exports.isErr = Result_1.isErr;
var and_1 = require("./and");
exports.and = and_1.andForResult;
var andThen_1 = require("./andThen");
exports.andThen = andThen_1.andThenForResult;
var expect_1 = require("./expect");
exports.expect = expect_1.expectIsOk;
exports.expectErr = expect_1.expectIsErr;
var map_1 = require("./map");
exports.map = map_1.mapForResult;
var mapOrElse_1 = require("./mapOrElse");
exports.mapOrElse = mapOrElse_1.mapOrElseForResult;
var mapErr_1 = require("./mapErr");
exports.mapErr = mapErr_1.mapErrForResult;
var or_1 = require("./or");
exports.or = or_1.orForResult;
var orElse_1 = require("./orElse");
exports.orElse = orElse_1.orElseForResult;
var tap_1 = require("./tap");
exports.tapOk = tap_1.tapOk;
exports.tapErr = tap_1.tapErr;
exports.tapBoth = tap_1.tapBoth;
var transpose_1 = require("./transpose");
exports.transpose = transpose_1.transposeForResult;
var toOption_1 = require("./toOption");
exports.toOptionFromOk = toOption_1.toOptionFromOk;
exports.toOptionFromErr = toOption_1.toOptionFromErr;
exports.ok = toOption_1.toOptionFromOk;
exports.err = toOption_1.toOptionFromErr;
var unwrap_1 = require("./unwrap");
exports.unwrap = unwrap_1.unwrapFromResult;
exports.unwrapErr = unwrap_1.unwrapErrFromResult;
var unwrapOr_1 = require("./unwrapOr");
exports.unwrapOr = unwrapOr_1.unwrapOrFromResult;
var unwrapOrElse_1 = require("./unwrapOrElse");
exports.unwrapOrElse = unwrapOrElse_1.unwrapOrElseFromResult;
