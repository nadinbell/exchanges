"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var expect_1 = require("./expect");
var ErrorMessage_1 = require("./ErrorMessage");
var Maybe_1 = require("./Maybe");
/**
 *  Return the result of _selector_ with using _src_ as an argument for it if _src_ is not `null` and `undefined`.
 *  Otherwise, return `null` or `undefined` inputted as _src_.
 *
 *  * `U` must not be `Maybe<*>`.
 *      * If you'd like return `Maybe<*>` as `U`, use `andThen()`.
 *      * If the result of _selector_ is `null` or `undefined`, this throw an `Error`.
 */
function mapForMaybe(src, selector) {
    if (Maybe_1.isNotNullAndUndefined(src)) {
        var r = selector(src);
        // XXX:
        // If `U` is `Maybe<SomeType>`, we think naturally the returned value of this function would be
        // the nested type `Maybe<Maybe<SomeType>>`. But this type means `(SomeType | null | undefined) | null | undefined`.
        // So a type checker would recognize this type as `SomeType | null | undefined`. So it's flattened.
        // Then the user should call `andThen` (_flatmap_) operation instead of this.
        return expect_1.expectNotNullAndUndefined(r, ErrorMessage_1.ERR_MSG_SELECTOR_MUST_NOT_RETURN_NO_VAL_FOR_MAYBE);
    }
    else {
        return src;
    }
}
exports.mapForMaybe = mapForMaybe;
